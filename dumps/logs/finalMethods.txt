avrora.actions.SimAction$TimeoutException.<init>(ILavrora.sim.State;JLjava.lang.String;)V
avrora.actions.SimAction.report(Ljava.lang.Throwable;)V
avrora.sim.clock.RippleSynchronizer.advance(JLavrora.sim.clock.RippleSynchronizer$WaitLink;)Lavrora.sim.clock.RippleSynchronizer$WaitLink;
avrora.sim.Simulation$Iter.next()Ljava.lang.Object;
avrora.sim.Simulation.getNodeIterator()Ljava.util.Iterator;
avrora.sim.util.ClockCycleTimeout.fire()V
cck.text.TermUtil.reportQuantity(Ljava.lang.String;Ljava.lang.String;Ljava.lang.String;)V
java.lang.invoke.AbstractValidatingLambdaMetafactory.<init>(Ljava.lang.invoke.MethodHandles$Lookup;Ljava.lang.invoke.MethodType;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;Z[Ljava.lang.Class;[Ljava.lang.invoke.MethodType;)V
java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs()V
java.lang.invoke.ArgumentConversionHandle.computeThunks(Ljava.lang.Object;)Ljava.lang.invoke.ThunkTuple;
java.lang.invoke.ArgumentConversionHandle.<init>(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;B)V
java.lang.invoke.Cache.computeValue(Ljava.lang.Class;)Ljava.util.Map;
java.lang.invoke.ConstantCallSite.getTarget()Ljava.lang.invoke.MethodHandle;
java.lang.invoke.ConstantHandle.get(Ljava.lang.Class;Ljava.lang.Object;)Ljava.lang.invoke.ConstantHandle;
java.lang.invoke.ConvertHandle.<init>(Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;BLjava.lang.Object;)V
java.lang.invoke.DirectHandle.cloneWithNewType(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.DirectHandle.directMethodType(Ljava.lang.invoke.MethodType;BLjava.lang.Class;)Ljava.lang.invoke.MethodType;
java.lang.invoke.HandleCache.cacheHandle(Ljava.util.Map;Ljava.lang.invoke.CacheKey;Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.HandleCache.getMethodWithSpecialCallerFromPerClassCache(Ljava.util.Map;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.HandleCache.putMethodWithSpecialCallerInPerClassCache(Ljava.util.Map;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodHandle;Ljava.lang.Class;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.InnerClassLambdaMetafactory$ForwardingMethodGenerator.invocationOpcode()I
java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite()Ljava.lang.invoke.CallSite;
java.lang.invoke.InnerClassLambdaMetafactory.<init>(Ljava.lang.invoke.MethodHandles$Lookup;Ljava.lang.invoke.MethodType;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;Z[Ljava.lang.Class;[Ljava.lang.invoke.MethodType;)V
java.lang.invoke.InnerClassLambdaMetafactory.spinInnerClass()Ljava.lang.Class;
java.lang.invoke.LambdaMetafactory.metafactory(Ljava.lang.invoke.MethodHandles$Lookup;Ljava.lang.String;Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodType;Ljava.lang.invoke.MethodHandle;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.CallSite;
java.lang.invoke.MethodHandle.asType(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.MethodHandleCache.addDirectHandle(Ljava.lang.invoke.DirectHandle;)V
java.lang.invoke.MethodHandleCache.getCache(Ljava.lang.Class;)Ljava.lang.invoke.MethodHandleCache;
java.lang.invoke.MethodHandleCache.<init>(Ljava.lang.Class;)V
java.lang.invoke.MethodHandle.computeThunks(Ljava.lang.Object;)Ljava.lang.invoke.ThunkTuple;
java.lang.invoke.MethodHandleResolver.getAdditionalBsmArg(Lcom.ibm.oti.vm.VMLangAccess;Ljava.lang.Object;Ljava.lang.Class;Ljava.lang.invoke.MethodHandle;JII)Ljava.lang.Object;
java.lang.invoke.MethodHandleResolver.resolveInvokeDynamic(JLjava.lang.String;Ljava.lang.String;J)Ljava.lang.Object;
java.lang.invoke.MethodHandleResolver.sendResolveMethodHandle(ILjava.lang.Class;Ljava.lang.Class;Ljava.lang.String;Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.MethodHandles$Lookup.checkAccess(Ljava.lang.Class;Ljava.lang.Class;Ljava.lang.String;ILjava.lang.invoke.MethodHandle;Z)V
java.lang.invoke.MethodHandles$Lookup.checkAccess(Ljava.lang.invoke.MethodHandle;Z)V
java.lang.invoke.MethodHandles$Lookup.checkClassAccess(Ljava.lang.Class;)V
java.lang.invoke.MethodHandles$Lookup.checkSecurity(Ljava.lang.Class;Ljava.lang.Class;I)V
java.lang.invoke.MethodHandles$Lookup.findStatic(Ljava.lang.Class;Ljava.lang.String;Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.MethodHandles$Lookup.initCheck(Ljava.lang.String;)V
java.lang.invoke.MethodHandles$Lookup.revealDirect(Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandleInfo;
java.lang.invoke.MethodHandles.constant(Ljava.lang.Class;Ljava.lang.Object;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.MethodType.createMethodDescriptorString()Ljava.lang.String;
java.lang.invoke.MethodType.fromMethodDescriptorString(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodTypeHelper.getBytecodeStringName(Ljava.lang.Class;)Ljava.lang.String;
java.lang.invoke.MethodTypeHelper.nonPrimitiveClassFromString(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.lang.Class;
java.lang.invoke.MethodTypeHelper.parseIntoClass([CILjava.util.ArrayList;Ljava.lang.ClassLoader;Ljava.lang.String;)I
java.lang.invoke.MethodTypeHelper.vmResolveFromMethodDescriptorString(Ljava.lang.String;Ljava.lang.ClassLoader;Ljava.lang.Class;)Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodType.<init>(Ljava.lang.Class;[Ljava.lang.Class;Z)V
java.lang.invoke.MethodType.intern()Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodType.methodType(Ljava.lang.Class;Ljava.lang.Class;[Ljava.lang.Class;)Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodType.methodType(Ljava.lang.Class;Ljava.lang.Class;)Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodType.methodType(Ljava.lang.Class;[Ljava.lang.Class;Z)Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodType.methodType(Ljava.lang.Class;Ljava.util.List;)Ljava.lang.invoke.MethodType;
java.lang.invoke.MethodType.parseIntoClasses(Ljava.lang.String;Ljava.lang.ClassLoader;)Ljava.util.ArrayList;
java.lang.invoke.MethodType.stackDescriptionBits([Ljava.lang.Class;I)[I
java.lang.invoke.PrimitiveHandle.finishMethodInitialization(Ljava.lang.Class;Ljava.lang.invoke.MethodType;)Ljava.lang.Class;
java.lang.invoke.SecurityFrameInjector.wrapHandleWithInjectedSecurityFrameIfRequired(Ljava.lang.invoke.MethodHandles$Lookup;Ljava.lang.invoke.MethodHandle;)Ljava.lang.invoke.MethodHandle;
java.lang.invoke.ThunkKey.computeThunkableType(Ljava.lang.invoke.MethodType;II)Ljava.lang.invoke.MethodType;
java.lang.invoke.ThunkTable.<init>()V
java.lang.invoke.ThunkTuple.newShareable(Ljava.lang.invoke.MethodType;)Ljava.lang.invoke.ThunkTuple;
java.lang.invoke.TypeConvertingMethodAdapter.descriptorToName(Ljava.lang.String;)Ljava.lang.String;
java.lang.invoke.TypeConvertingMethodAdapter.hashWrapperName(Ljava.lang.String;)I
java.lang.StringBuilder.toString()Ljava.lang.String;
java.lang.String.<init>([CIIZZ)V
java.util.LinkedList.linkLast(Ljava.lang.Object;)V
java.util.LinkedList.listIterator(I)Ljava.util.ListIterator;
java.util.zip.ZipCoder.toStringUTF8([BI)Ljava.lang.String;
java.util.zip.ZipFile.getInputStream(Ljava.util.zip.ZipEntry;)Ljava.io.InputStream;
java.util.zip.ZipFile.getZipEntry(Ljava.lang.String;J)Ljava.util.zip.ZipEntry;
org.dacapo.harness.Benchmark.cleanup()V
org.dacapo.harness.Benchmark.deleteFile(Ljava.io.File;)V
org.dacapo.harness.Benchmark.deleteTree(Ljava.io.File;)V
org.dacapo.harness.Benchmark.fileInScratch(Ljava.lang.String;)Ljava.lang.String;
org.dacapo.harness.Benchmark.postIterationCleanup(Ljava.lang.String;)V
org.dacapo.harness.Benchmark.validate(Ljava.lang.String;)Z
org.dacapo.harness.Callback.complete(Ljava.lang.String;ZZ)V
org.dacapo.harness.Callback.runAgain()Z
org.dacapo.harness.Digest.toString([B)Ljava.lang.String;
org.dacapo.harness.FileDigest.get(Ljava.lang.String;ZZLjava.io.File;)[B
org.dacapo.harness.FileDigest.getText(Ljava.io.File;ZLjava.io.File;)[B
