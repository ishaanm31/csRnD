<avrora.actions.SimAction$TimeoutException: <init>(ILavrora/sim/State;JLjava/lang/String;)V>
<avrora.monitors.PacketMonitor$Mon: append(C)V>
<avrora.sim.CodeSegment: readInstr(I)Lavrora/arch/legacy/LegacyInstr;>
<avrora.sim.FiniteStateMachine: transition(I)V>
<avrora.sim.clock.DeltaQueue: newEventList(Lavrora/sim/Simulator$Event;Lavrora/sim/clock/DeltaQueue$EventList;)Lavrora/sim/clock/DeltaQueue$EventList;>
<avrora.sim.clock.DeltaQueue: newLink(Lavrora/sim/Simulator$Event;JLavrora/sim/clock/DeltaQueue$Link;)Lavrora/sim/clock/DeltaQueue$Link;>
<avrora.sim.clock.RippleSynchronizer: advance(JLavrora/sim/clock/RippleSynchronizer$WaitLink;)Lavrora/sim/clock/RippleSynchronizer$WaitLink;>
<avrora.sim.clock.RippleSynchronizer: insertLink(JLavrora/sim/clock/RippleSynchronizer$WaitLink;Lavrora/sim/clock/RippleSynchronizer$WaitLink;)Lavrora/sim/clock/RippleSynchronizer$WaitLink;>
<avrora.sim.mcu.ADC$ControlRegister$ConversionEvent: fire()V>
<avrora.sim.mcu.ADC$ControlRegister: insertConversion()V>
<avrora.sim.mcu.DefaultMCU$Pin: printWrite(Z)V>
<avrora.sim.mcu.SPI$SPCRReg: write(B)V>
<avrora.sim.mcu.Timer8Bit$ControlRegister: write(B)V>
<avrora.sim.mcu.Timer8Bit: compareMatch()V>
<avrora.sim.platform.ExternalFlash$PA3Output: write(Z)V>
<avrora.sim.platform.ExternalFlash$PD5Output: write(Z)V>
<avrora.sim.radio.CC1000Radio$Receiver: nextByte(ZB)B>
<avrora.sim.radio.CC1000Radio$SerialConfigurationInterface: clockInBit()V>
<avrora.sim.radio.CC1000Radio$Transmitter: nextByte()B>
<avrora.sim.radio.Medium$Transmission: <init>(Lavrora/sim/radio/Medium;Lavrora/sim/radio/Medium$Transmitter;DD)V>
<avrora.sim.radio.Medium$Transmitter$Ticker: fire()V>
<avrora.sim.radio.Medium: newTransmission(Lavrora/sim/radio/Medium$Transmitter;DD)Lavrora/sim/radio/Medium$Transmission;>
<avrora.sim.util.ClockCycleTimeout: fire()V>
<avrora.sim.util.SimUtil: toIDTimeString(Ljava/lang/StringBuffer;ILavrora/sim/clock/Clock;)V>
<cck.text.StringUtil: convertToHex(JII[C[C)Ljava/lang/String;>
<cck.text.StringUtil: dup(CI)Ljava/lang/String;>
<cck.text.StringUtil: justify(ZLjava/lang/String;I)Ljava/lang/String;>
<cck.text.StringUtil: to0xHex(JI)Ljava/lang/String;>
<cck.text.StringUtil: toFixedFloat(FI)Ljava/lang/String;>
<cck.text.StringUtil: toHex(JI)Ljava/lang/String;>
<cck.text.TermUtil: printSeparator(ILjava/lang/String;)V>
<java.io.BufferedWriter: ensureOpen()V>
<java.io.BufferedWriter: write(Ljava/lang/String;II)V>
<java.io.File: <init>(Ljava/io/File;Ljava/lang/String;)V>
<java.io.FileOutputStream: close()V>
<java.io.FilterOutputStream: write([BII)V>
<java.io.PrintStream: ensureOpen()V>
<java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)I>
<java.io.UnixFileSystem: normalize(Ljava/lang/String;)Ljava/lang/String;>
<java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)I>
<java.io.UnixFileSystem: resolve(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;>
<java.lang.ClassLoader: checkClassName(Ljava/lang/String;)Ljava/lang/String;>
<java.lang.ClassLoader: checkPackageSigners(Ljava/lang/String;Ljava/lang/String;[Ljava/security/cert/Certificate;)V>
<java.lang.ClassLoader: defineClassInternal(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Z)Ljava/lang/Class;>
<java.lang.ClassLoader: findLoadedClass(Ljava/lang/String;)Ljava/lang/Class;>
<java.lang.ClassLoader: getClassLoadingLock(Ljava/lang/String;)Ljava/lang/Object;>
<java.lang.Long: toString(J)Ljava/lang/String;>
<java.lang.String: <init>(Ljava/lang/String;Ljava/lang/String;)V>
<java.lang.String: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V>
<java.lang.String: <init>([CII)V>
<java.lang.String: <init>([CIIZ)V>
<java.lang.String: <init>([CIIZZ)V>
<java.lang.String: <init>([CZ)V>
<java.lang.String: charAt(I)C>
<java.lang.String: concat(Ljava/lang/String;)Ljava/lang/String;>
<java.lang.String: getBytes(Ljava/lang/String;)[B>
<java.lang.String: replace(CC)Ljava/lang/String;>
<java.lang.String: substring(I)Ljava/lang/String;>
<java.lang.String: substring(II)Ljava/lang/String;>
<java.lang.String: toCharArray()[C>
<java.lang.String: valueOf(C)Ljava/lang/String;>
<java.lang.StringBuffer: <init>(I)V>
<java.lang.StringBuffer: append(C)Ljava/lang/StringBuffer;>
<java.lang.StringBuffer: append(J)Ljava/lang/StringBuffer;>
<java.lang.StringBuffer: append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<java.lang.StringBuffer: ensureCapacityImpl(I)V>
<java.lang.StringBuffer: toString()Ljava/lang/String;>
<java.lang.StringBuilder: <init>(I)V>
<java.lang.StringBuilder: append(C)Ljava/lang/StringBuilder;>
<java.lang.StringBuilder: append(Ljava/lang/String;)Ljava/lang/StringBuilder;>
<java.lang.StringBuilder: ensureCapacityImpl(I)V>
<java.lang.StringBuilder: toString()Ljava/lang/String;>
<java.lang.StringCoding$StringEncoder: encode([CII)[B>
<java.lang.StringCoding: encode(Ljava/lang/String;[CII)[B>
<java.lang.Thread: start()V>
<java.lang.ThreadGroup: add(Ljava/lang/Thread;)V>
<java.net.URL: <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V>
<java.net.URL: set(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V>
<java.net.URLClassLoader$ClassFinder: run()Ljava/lang/Object;>
<java.net.URLClassLoader: findClass(Ljava/lang/String;)Ljava/lang/Class;>
<java.net.URLClassLoader: getAndVerifyPackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package;>
<java.net.URLStreamHandler: setURL(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V>
<java.nio.Buffer: <init>(IIII)V>
<java.nio.Buffer: limit(I)Ljava/nio/Buffer;>
<java.nio.Buffer: position(I)Ljava/nio/Buffer;>
<java.nio.ByteBuffer: array()[B>
<java.nio.ByteBuffer: arrayOffset()I>
<java.nio.CharBuffer: array()[C>
<java.nio.CharBuffer: arrayOffset()I>
<java.nio.CharBuffer: wrap([CII)Ljava/nio/CharBuffer;>
<java.nio.charset.Charset: atBugLevel(Ljava/lang/String;)Z>
<java.nio.charset.Charset: lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;>
<java.nio.charset.CharsetEncoder: <init>(Ljava/nio/charset/Charset;FF)V>
<java.nio.charset.CharsetEncoder: encode(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;>
<java.security.CodeSource: getCertificates()[Ljava/security/cert/Certificate;>
<java.security.SecureClassLoader: getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain;>
<java.util.Arrays: copyOf([BI)[B>
<java.util.BitSet: get(I)Z>
<java.util.HashMap$HashIterator: nextNode()Ljava/util/HashMap$Node;>
<java.util.Hashtable: addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V>
<java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;>
<java.util.LinkedList$ListItr: checkForComodification()V>
<java.util.LinkedList$ListItr: next()Ljava/lang/Object;>
<java.util.LinkedList$ListItr: remove()V>
<java.util.LinkedList: checkPositionIndex(I)V>
<java.util.LinkedList: linkLast(Ljava/lang/Object;)V>
<java.util.LinkedList: listIterator(I)Ljava/util/ListIterator;>
<java.util.Objects: requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;>
<java.util.WeakHashMap: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;>
<java.util.jar.JarFile$JarFileEntry: getCodeSigners()[Ljava/security/CodeSigner;>
<java.util.jar.JarFile: ensureInitialization()V>
<java.util.jar.JarFile: getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;>
<java.util.zip.Inflater: ensureOpen()V>
<java.util.zip.Inflater: inflate([BII)I>
<java.util.zip.Inflater: setInput([BII)V>
<java.util.zip.InflaterInputStream: <init>(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V>
<java.util.zip.InflaterInputStream: ensureOpen()V>
<java.util.zip.InflaterInputStream: read([BII)I>
<java.util.zip.ZipCoder: getBytes(Ljava/lang/String;)[B>
<java.util.zip.ZipCoder: toString([BI)Ljava/lang/String;>
<java.util.zip.ZipEntry: setExtra0([BZ)V>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: fill()V>
<java.util.zip.ZipFile: ensureOpen()V>
<java.util.zip.ZipFile: getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;>
<java.util.zip.ZipFile: getInflater()Ljava/util/zip/Inflater;>
<java.util.zip.ZipFile: getInputStream(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;>
<java.util.zip.ZipFile: getZipEntry(Ljava/lang/String;J)Ljava/util/zip/ZipEntry;>
<org.dacapo.harness.DacapoClassLoader: loadClass(Ljava/lang/String;Z)Ljava/lang/Class;>
<org.dacapo.parser.Config: getSize(Ljava/lang/String;)Lorg/dacapo/parser/Config$Size;>
<sun.misc.Launcher$AppClassLoader: loadClass(Ljava/lang/String;Z)Ljava/lang/Class;>
<sun.misc.Resource: getBytes()[B>
<sun.misc.URLClassPath$JarLoader: checkResource(Ljava/lang/String;ZLjava/util/jar/JarEntry;)Lsun/misc/Resource;>
<sun.misc.URLClassPath$JarLoader: ensureOpen()V>
<sun.misc.URLClassPath$JarLoader: getResource(Ljava/lang/String;Z)Lsun/misc/Resource;>
<sun.misc.URLClassPath: getLoader(I)Lsun/misc/URLClassPath$Loader;>
<sun.misc.URLClassPath: getLookupCache(Ljava/lang/String;)[I>
<sun.misc.URLClassPath: getResource(Ljava/lang/String;ZLjava/lang/ClassLoader;Z)Lsun/misc/Resource;>
<sun.net.util.IPAddressUtil: checkHostString(Ljava/lang/String;)Ljava/lang/String;>
<sun.net.util.IPAddressUtil: scan(Ljava/lang/String;JJ[C)I>
<sun.net.www.ParseUtil: canonizeString(Ljava/lang/String;)Ljava/lang/String;>
<sun.net.www.ParseUtil: encodePath(Ljava/lang/String;Z)Ljava/lang/String;>
<sun.net.www.protocol.jar.Handler: indexOfBangSlash(Ljava/lang/String;)I>
<sun.net.www.protocol.jar.Handler: parseContextSpec(Ljava/net/URL;Ljava/lang/String;)Ljava/lang/String;>
<sun.net.www.protocol.jar.Handler: parseURL(Ljava/net/URL;Ljava/lang/String;II)V>
<sun.nio.cs.StreamEncoder: ensureOpen()V>
<sun.nio.cs.StreamEncoder: flushBuffer()V>
<sun.nio.cs.StreamEncoder: write([CII)V>
<sun.nio.cs.UTF_8$Decoder: decode([BII[C)I>
<sun.nio.cs.UTF_8$Encoder: encode([CII[B)I>
<sun.nio.cs.UTF_8$Encoder: encodeArrayLoop(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;>
<sun.nio.cs.UTF_8: newEncoder()Ljava/nio/charset/CharsetEncoder;><avrora.actions.SimAction$TimeoutException: <init>(ILavrora/sim/State;JLjava/lang/String;)V>
<avrora.monitors.PacketMonitor$Mon: append(C)V>
<avrora.sim.CodeSegment: readInstr(I)Lavrora/arch/legacy/LegacyInstr;>
<avrora.sim.FiniteStateMachine: transition(I)V>
<avrora.sim.clock.DeltaQueue: newEventList(Lavrora/sim/Simulator$Event;Lavrora/sim/clock/DeltaQueue$EventList;)Lavrora/sim/clock/DeltaQueue$EventList;>
<avrora.sim.clock.DeltaQueue: newLink(Lavrora/sim/Simulator$Event;JLavrora/sim/clock/DeltaQueue$Link;)Lavrora/sim/clock/DeltaQueue$Link;>
<avrora.sim.clock.RippleSynchronizer: advance(JLavrora/sim/clock/RippleSynchronizer$WaitLink;)Lavrora/sim/clock/RippleSynchronizer$WaitLink;>
<avrora.sim.clock.RippleSynchronizer: insertLink(JLavrora/sim/clock/RippleSynchronizer$WaitLink;Lavrora/sim/clock/RippleSynchronizer$WaitLink;)Lavrora/sim/clock/RippleSynchronizer$WaitLink;>
<avrora.sim.mcu.ADC$ControlRegister$ConversionEvent: fire()V>
<avrora.sim.mcu.ADC$ControlRegister: insertConversion()V>
<avrora.sim.mcu.DefaultMCU$Pin: printWrite(Z)V>
<avrora.sim.mcu.SPI$SPCRReg: write(B)V>
<avrora.sim.mcu.Timer8Bit$ControlRegister: write(B)V>
<avrora.sim.mcu.Timer8Bit: compareMatch()V>
<avrora.sim.platform.ExternalFlash$PA3Output: write(Z)V>
<avrora.sim.platform.ExternalFlash$PD5Output: write(Z)V>
<avrora.sim.radio.CC1000Radio$Receiver: nextByte(ZB)B>
<avrora.sim.radio.CC1000Radio$SerialConfigurationInterface: clockInBit()V>
<avrora.sim.radio.CC1000Radio$Transmitter: nextByte()B>
<avrora.sim.radio.Medium$Transmission: <init>(Lavrora/sim/radio/Medium;Lavrora/sim/radio/Medium$Transmitter;DD)V>
<avrora.sim.radio.Medium$Transmitter$Ticker: fire()V>
<avrora.sim.radio.Medium: newTransmission(Lavrora/sim/radio/Medium$Transmitter;DD)Lavrora/sim/radio/Medium$Transmission;>
<avrora.sim.util.ClockCycleTimeout: fire()V>
<avrora.sim.util.SimUtil: toIDTimeString(Ljava/lang/StringBuffer;ILavrora/sim/clock/Clock;)V>
<cck.text.StringUtil: convertToHex(JII[C[C)Ljava/lang/String;>
<cck.text.StringUtil: dup(CI)Ljava/lang/String;>
<cck.text.StringUtil: justify(ZLjava/lang/String;I)Ljava/lang/String;>
<cck.text.StringUtil: to0xHex(JI)Ljava/lang/String;>
<cck.text.StringUtil: toFixedFloat(FI)Ljava/lang/String;>
<cck.text.StringUtil: toHex(JI)Ljava/lang/String;>
<cck.text.TermUtil: printSeparator(ILjava/lang/String;)V>
<java.io.BufferedWriter: ensureOpen()V>
<java.io.BufferedWriter: write(Ljava/lang/String;II)V>
<java.io.File: <init>(Ljava/io/File;Ljava/lang/String;)V>
<java.io.FileOutputStream: close()V>
<java.io.FilterOutputStream: write([BII)V>
<java.io.PrintStream: ensureOpen()V>
<java.io.UnixFileSystem: getBooleanAttributes(Ljava/io/File;)I>
<java.io.UnixFileSystem: normalize(Ljava/lang/String;)Ljava/lang/String;>
<java.io.UnixFileSystem: prefixLength(Ljava/lang/String;)I>
<java.io.UnixFileSystem: resolve(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;>
<java.lang.ClassLoader: checkClassName(Ljava/lang/String;)Ljava/lang/String;>
<java.lang.ClassLoader: checkPackageSigners(Ljava/lang/String;Ljava/lang/String;[Ljava/security/cert/Certificate;)V>
<java.lang.ClassLoader: defineClassInternal(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Z)Ljava/lang/Class;>
<java.lang.ClassLoader: findLoadedClass(Ljava/lang/String;)Ljava/lang/Class;>
<java.lang.ClassLoader: getClassLoadingLock(Ljava/lang/String;)Ljava/lang/Object;>
<java.lang.Long: toString(J)Ljava/lang/String;>
<java.lang.String: <init>(Ljava/lang/String;Ljava/lang/String;)V>
<java.lang.String: <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V>
<java.lang.String: <init>([CII)V>
<java.lang.String: <init>([CIIZ)V>
<java.lang.String: <init>([CIIZZ)V>
<java.lang.String: <init>([CZ)V>
<java.lang.String: charAt(I)C>
<java.lang.String: concat(Ljava/lang/String;)Ljava/lang/String;>
<java.lang.String: getBytes(Ljava/lang/String;)[B>
<java.lang.String: replace(CC)Ljava/lang/String;>
<java.lang.String: substring(I)Ljava/lang/String;>
<java.lang.String: substring(II)Ljava/lang/String;>
<java.lang.String: toCharArray()[C>
<java.lang.String: valueOf(C)Ljava/lang/String;>
<java.lang.StringBuffer: <init>(I)V>
<java.lang.StringBuffer: append(C)Ljava/lang/StringBuffer;>
<java.lang.StringBuffer: append(J)Ljava/lang/StringBuffer;>
<java.lang.StringBuffer: append(Ljava/lang/String;)Ljava/lang/StringBuffer;>
<java.lang.StringBuffer: ensureCapacityImpl(I)V>
<java.lang.StringBuffer: toString()Ljava/lang/String;>
<java.lang.StringBuilder: <init>(I)V>
<java.lang.StringBuilder: append(C)Ljava/lang/StringBuilder;>
<java.lang.StringBuilder: append(Ljava/lang/String;)Ljava/lang/StringBuilder;>
<java.lang.StringBuilder: ensureCapacityImpl(I)V>
<java.lang.StringBuilder: toString()Ljava/lang/String;>
<java.lang.StringCoding$StringEncoder: encode([CII)[B>
<java.lang.StringCoding: encode(Ljava/lang/String;[CII)[B>
<java.lang.Thread: start()V>
<java.lang.ThreadGroup: add(Ljava/lang/Thread;)V>
<java.net.URL: <init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V>
<java.net.URL: set(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V>
<java.net.URLClassLoader$ClassFinder: run()Ljava/lang/Object;>
<java.net.URLClassLoader: findClass(Ljava/lang/String;)Ljava/lang/Class;>
<java.net.URLClassLoader: getAndVerifyPackage(Ljava/lang/String;Ljava/util/jar/Manifest;Ljava/net/URL;)Ljava/lang/Package;>
<java.net.URLStreamHandler: setURL(Ljava/net/URL;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V>
<java.nio.Buffer: <init>(IIII)V>
<java.nio.Buffer: limit(I)Ljava/nio/Buffer;>
<java.nio.Buffer: position(I)Ljava/nio/Buffer;>
<java.nio.ByteBuffer: array()[B>
<java.nio.ByteBuffer: arrayOffset()I>
<java.nio.CharBuffer: array()[C>
<java.nio.CharBuffer: arrayOffset()I>
<java.nio.CharBuffer: wrap([CII)Ljava/nio/CharBuffer;>
<java.nio.charset.Charset: atBugLevel(Ljava/lang/String;)Z>
<java.nio.charset.Charset: lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;>
<java.nio.charset.CharsetEncoder: <init>(Ljava/nio/charset/Charset;FF)V>
<java.nio.charset.CharsetEncoder: encode(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;>
<java.security.CodeSource: getCertificates()[Ljava/security/cert/Certificate;>
<java.security.SecureClassLoader: getProtectionDomain(Ljava/security/CodeSource;)Ljava/security/ProtectionDomain;>
<java.util.Arrays: copyOf([BI)[B>
<java.util.BitSet: get(I)Z>
<java.util.HashMap$HashIterator: nextNode()Ljava/util/HashMap$Node;>
<java.util.Hashtable: addEntry(ILjava/lang/Object;Ljava/lang/Object;I)V>
<java.util.Hashtable: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;>
<java.util.LinkedList$ListItr: checkForComodification()V>
<java.util.LinkedList$ListItr: next()Ljava/lang/Object;>
<java.util.LinkedList$ListItr: remove()V>
<java.util.LinkedList: checkPositionIndex(I)V>
<java.util.LinkedList: linkLast(Ljava/lang/Object;)V>
<java.util.LinkedList: listIterator(I)Ljava/util/ListIterator;>
<java.util.Objects: requireNonNull(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;>
<java.util.WeakHashMap: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;>
<java.util.jar.JarFile$JarFileEntry: getCodeSigners()[Ljava/security/CodeSigner;>
<java.util.jar.JarFile: ensureInitialization()V>
<java.util.jar.JarFile: getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;>
<java.util.zip.Inflater: ensureOpen()V>
<java.util.zip.Inflater: inflate([BII)I>
<java.util.zip.Inflater: setInput([BII)V>
<java.util.zip.InflaterInputStream: <init>(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V>
<java.util.zip.InflaterInputStream: ensureOpen()V>
<java.util.zip.InflaterInputStream: read([BII)I>
<java.util.zip.ZipCoder: getBytes(Ljava/lang/String;)[B>
<java.util.zip.ZipCoder: toString([BI)Ljava/lang/String;>
<java.util.zip.ZipEntry: setExtra0([BZ)V>
<java.util.zip.ZipFile$ZipFileInflaterInputStream: fill()V>
<java.util.zip.ZipFile: ensureOpen()V>
<java.util.zip.ZipFile: getEntry(Ljava/lang/String;)Ljava/util/zip/ZipEntry;>
<java.util.zip.ZipFile: getInflater()Ljava/util/zip/Inflater;>
<java.util.zip.ZipFile: getInputStream(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;>
<java.util.zip.ZipFile: getZipEntry(Ljava/lang/String;J)Ljava/util/zip/ZipEntry;>
<org.dacapo.harness.DacapoClassLoader: loadClass(Ljava/lang/String;Z)Ljava/lang/Class;>
<org.dacapo.parser.Config: getSize(Ljava/lang/String;)Lorg/dacapo/parser/Config$Size;>
<sun.misc.Launcher$AppClassLoader: loadClass(Ljava/lang/String;Z)Ljava/lang/Class;>
<sun.misc.Resource: getBytes()[B>
<sun.misc.URLClassPath$JarLoader: checkResource(Ljava/lang/String;ZLjava/util/jar/JarEntry;)Lsun/misc/Resource;>
<sun.misc.URLClassPath$JarLoader: ensureOpen()V>
<sun.misc.URLClassPath$JarLoader: getResource(Ljava/lang/String;Z)Lsun/misc/Resource;>
<sun.misc.URLClassPath: getLoader(I)Lsun/misc/URLClassPath$Loader;>
<sun.misc.URLClassPath: getLookupCache(Ljava/lang/String;)[I>
<sun.misc.URLClassPath: getResource(Ljava/lang/String;ZLjava/lang/ClassLoader;Z)Lsun/misc/Resource;>
<sun.net.util.IPAddressUtil: checkHostString(Ljava/lang/String;)Ljava/lang/String;>
<sun.net.util.IPAddressUtil: scan(Ljava/lang/String;JJ[C)I>
<sun.net.www.ParseUtil: canonizeString(Ljava/lang/String;)Ljava/lang/String;>
<sun.net.www.ParseUtil: encodePath(Ljava/lang/String;Z)Ljava/lang/String;>
<sun.net.www.protocol.jar.Handler: indexOfBangSlash(Ljava/lang/String;)I>
<sun.net.www.protocol.jar.Handler: parseContextSpec(Ljava/net/URL;Ljava/lang/String;)Ljava/lang/String;>
<sun.net.www.protocol.jar.Handler: parseURL(Ljava/net/URL;Ljava/lang/String;II)V>
<sun.nio.cs.StreamEncoder: ensureOpen()V>
<sun.nio.cs.StreamEncoder: flushBuffer()V>
<sun.nio.cs.StreamEncoder: write([CII)V>
<sun.nio.cs.UTF_8$Decoder: decode([BII[C)I>
<sun.nio.cs.UTF_8$Encoder: encode([CII[B)I>
<sun.nio.cs.UTF_8$Encoder: encodeArrayLoop(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;>
<sun.nio.cs.UTF_8: newEncoder()Ljava/nio/charset/CharsetEncoder;>
